import { create } from 'zustand';
import { Address } from '@/interfaces/client/address.interface';

import api from '@/services/api';
import { getApiErrorMessage } from '@/services/apiErrors';

// This is the data we can send to the API to create or update an address.
// It's the `Address` type without the fields generated by the server (id, uuid).
export type AddressPayload = Omit<Address, 'id' | 'uuid'>;

interface AddressState {
    addresses: Address[];
    isLoading: boolean;
    error: string | null;
}

interface AddressActions {
    fetchAddresses: () => Promise<void>;
    addAddress: (data: AddressPayload) => Promise<void>;
    editAddress: (uuid: string, data: Partial<AddressPayload>) => Promise<void>;
    removeAddress: (uuid: string) => Promise<void>;
}

const initialState: AddressState = {
    addresses: [],
    isLoading: false,
    error: null,
};

export const useAddressStore = create<AddressState & AddressActions>((set) => ({
    ...initialState,

    /**
     * Obtiene las direcciones del usuario y las carga en el estado.
     */
    fetchAddresses: async () => {
        set({ isLoading: true, error: null });
        try {
            const response = await api.get<Address[]>('/addresses/');
            set({ addresses: response.data, isLoading: false });
        } catch (error) {
            const errorMessage = getApiErrorMessage(error);
            set({ error: errorMessage, isLoading: false });
        }
    },

    /**
     * Crea una nueva dirección y la añade al estado.
     * @param data - Los datos de la nueva dirección.
     */
    addAddress: async (data: AddressPayload) => {
        // No activamos isLoading aquí para una experiencia de usuario más fluida
        // La UI puede mostrar un spinner en el botón de guardar.
        set({ error: null });
        try {
            const response = await api.post<Address>('/addresses/', data);
            set((state) => ({
                addresses: [...state.addresses, response.data],
            }));
        } catch (error) {
            const errorMessage = getApiErrorMessage(error);
            set({ error: errorMessage, isLoading: false });
            // Re-lanzamos el error para que el formulario pueda manejarlo (ej. mostrar un Toast)
            throw error;
        }
    },

    /**
     * Actualiza una dirección existente en el estado.
     * @param uuid - El UUID de la dirección a actualizar.
     * @param data - Los nuevos datos para la dirección.
     */
    editAddress: async (uuid: string, data: Partial<AddressPayload>) => {
        set({ error: null });
        try {
            const response = await api.put<Address>(`/addresses/${uuid}`, data);
            set((state) => ({
                addresses: state.addresses.map((addr) =>
                    addr.uuid === uuid ? response.data : addr,
                ),
            }));
        } catch (error) {
            const errorMessage = getApiErrorMessage(error);
            set({ error: errorMessage });
            throw error;
        }
    },

    /**
     * Elimina una dirección del estado.
     * @param uuid - El UUID de la dirección a eliminar.
     */
    removeAddress: async (uuid: string) => {
        // Guardamos la lista actual en caso de que la eliminación falle
        const currentAddresses = useAddressStore.getState().addresses;
        // Eliminamos la dirección de la UI inmediatamente para una respuesta rápida
        set((state) => ({
            addresses: state.addresses.filter((addr) => addr.uuid !== uuid),
            error: null,
        }));
        try {
            await api.delete(`/addresses/${uuid}`);
        } catch (error) {
            const errorMessage = getApiErrorMessage(error);
            // Si falla, restauramos la lista y mostramos el error
            set({ error: errorMessage, addresses: currentAddresses });
            throw error;
        }
    },
}));