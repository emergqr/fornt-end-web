'use client';

/**
 * @file This file defines the interfaces related to the Medical History entities, including events, documents, and the unified timeline.
 * It corresponds to the schemas defined in the openapi.json specification.
 */

/**
 * Defines the allowed types for a medical event.
 * Corresponds to the 'MedicalEventType' enum in the API.
 */
export type MedicalEventType =
  | 'Cirugía'
  | 'Estudio de Imagen'
  | 'Análisis de Laboratorio'
  | 'Tratamiento'
  | 'Cita Médica'
  | 'Procedimiento Estético'
  | 'Otro';

/**
 * Represents a medical document attached to an event, as it is read from the API.
 * Corresponds to the 'MedicalDocumentRead' schema.
 */
export interface MedicalDocumentRead {
  /** The unique identifier for the document (UUID). */
  uuid: string;
  /** The original name of the uploaded file. */
  file_name: string;
  /** The MIME type of the file (e.g., 'application/pdf', 'image/jpeg'). */
  mime_type: string;
  /** An optional description of the document. */
  description?: string | null;
  /** A read-only, publicly accessible URL to the document, generated by the backend. */
  url: string;
}

/**
 * Represents a complete medical event, including its associated documents, as read from the API.
 * Corresponds to the 'MedicalEventRead' schema.
 */
export interface MedicalEventRead {
  /** The unique identifier for the medical event (UUID). */
  uuid: string;
  /** The type of the medical event. */
  event_type: MedicalEventType;
  /** The title or name of the event (e.g., 'Knee Surgery'). */
  title: string;
  /** An optional detailed description of the event. */
  description?: string | null;
  /** The date and time when the event occurred (ISO 8601 format). */
  event_date: string;
  /** The location where the event took place (e.g., 'General Hospital'). */
  location?: string | null;
  /** The name of the doctor or practitioner involved. */
  doctor_name?: string | null;
  /** A flexible object for any additional, unstructured details about the event. */
  details?: Record<string, any> | null;
  /** An array of documents associated with this event. */
  documents: MedicalDocumentRead[];
}

/**
 * Defines the data structure for creating a new medical event.
 * It omits fields that are generated by the backend, such as 'uuid' and 'documents'.
 */
export type MedicalEventCreate = Omit<MedicalEventRead, 'uuid' | 'documents'>;

/**
 * Defines the data structure for updating an existing medical event.
 * All fields are optional to allow for partial updates.
 */
export type MedicalEventUpdate = Partial<MedicalEventCreate>;

/**
 * Represents a single item in the unified medical timeline.
 * This is a flattened, read-only structure designed for display purposes.
 * Corresponds to the 'TimelineItemRead' schema.
 */
export interface TimelineItemRead {
  /** The type of the timeline item, used to determine the icon and context. */
  type: 'disease' | 'event' | 'allergy' | 'medication';
  /** The primary date of the item (e.g., diagnosis date, event date). ISO 8601 format. */
  date: string;
  /** The main title of the timeline item. */
  title: string;
  /** A summary or key details about the item. */
  details: string;
}
